# -*- coding: utf-8 -*-
"""project1.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17tMukrJth4lDGQbExzqrAiqZbOcJXkG7
"""

import hashlib
import os
from datetime import datetime
from getpass import getpass

ACCOUNTS_FILE = "accounts.txt"
TRANSACTIONS_FILE = "transactions.txt"

def hash_password(password):
    """Return SHA-256 hash of the password."""
    return hashlib.sha256(password.encode()).hexdigest()

def generate_account_number():
    """Generate unique 6-digit account number."""
    from random import randint
    while True:
        acc_num = str(randint(100000, 999999))
        if not account_exists(acc_num):
            return acc_num

def account_exists(account_number):
    """Check if an account number exists."""
    if not os.path.exists(ACCOUNTS_FILE):
        return False
    with open(ACCOUNTS_FILE, "r") as f:
        return any(line.startswith(account_number + ",") for line in f)

def create_account():
    print("\n--- Create New Account ---")
    name = input("Enter your name: ").strip()
    while True:
        initial_deposit = input("Enter your initial deposit amount: ").strip()
        if initial_deposit.isdigit() and int(initial_deposit) >= 0:
            initial_deposit = int(initial_deposit)
            break
        else:
            print("Please enter a valid non-negative integer amount.")
    while True:
        password = getpass("Choose a password (hidden input): ")
        password_confirm = getpass("Confirm your password: ")
        if password == password_confirm:
            break
        else:
            print("Passwords do not match. Please try again.")
    account_number = generate_account_number()
    hashed_pw = hash_password(password)
    try:
        with open(ACCOUNTS_FILE, "a") as f:
            f.write(f"{account_number},{name},{hashed_pw},{initial_deposit}\n")
        print(f"\nAccount created successfully!")
        print(f"Your account number (use this to login): {account_number}")
    except Exception as e:
        print("Failed to create account:", e)

def login():
    print("\n--- Login ---")
    account_number = input("Enter your account number: ").strip()
    if not account_exists(account_number):
        print("Account number not found.")
        return None
    password = getpass("Enter your password: ")
    hashed_pw = hash_password(password)
    with open(ACCOUNTS_FILE, "r") as f:
        for line in f:
            acc_num, name, stored_pw, balance = line.strip().split(",")
            if acc_num == account_number and stored_pw == hashed_pw:
                print(f"Login successful! Welcome, {name}.")
                return acc_num, name, int(balance)
    print("Incorrect password.")
    return None

def update_account_balance(account_number, new_balance):
    """Update balance in accounts file."""
    try:
        with open(ACCOUNTS_FILE, "r") as f:
            accounts = f.readlines()
        with open(ACCOUNTS_FILE, "w") as f:
            for account in accounts:
                acc_num, name, pw, balance = account.strip().split(",")
                if acc_num == account_number:
                    f.write(f"{acc_num},{name},{pw},{new_balance}\n")
                else:
                    f.write(account)
    except Exception as e:
        print("Failed to update account balance:", e)

def log_transaction(account_number, trans_type, amount):
    """Append transaction details to transactions file."""
    try:
        with open(TRANSACTIONS_FILE, "a") as f:
            date_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            f.write(f"{account_number},{trans_type},{amount},{date_str}\n")
    except Exception as e:
        print("Failed to log transaction:", e)

def perform_transactions(account_number, name, balance):
    while True:
        print(f"\n--- Transactions Menu for {name} ---")
        print("1. Deposit")
        print("2. Withdraw")
        print("3. Check Balance")
        print("4. Logout")
        choice = input("Select an option: ").strip()
        if choice == '1':
            amount = input("Enter amount to deposit: ").strip()
            if amount.isdigit() and int(amount) > 0:
                amount = int(amount)
                balance += amount
                update_account_balance(account_number, balance)
                log_transaction(account_number, "Deposit", amount)
                print(f"Deposit successful. New balance: {balance}")
            else:
                print("Invalid amount. Please enter a positive number.")
        elif choice == '2':
            amount = input("Enter amount to withdraw: ").strip()
            if amount.isdigit() and int(amount) > 0:
                amount = int(amount)
                if amount > balance:
                    print("Insufficient funds. Withdrawal denied.")
                else:
                    balance -= amount
                    update_account_balance(account_number, balance)
                    log_transaction(account_number, "Withdrawal", amount)
                    print(f"Withdrawal successful. New balance: {balance}")
            else:
                print("Invalid amount. Please enter a positive number.")
        elif choice == '3':
            print(f"Your current balance is: {balance}")
        elif choice == '4':
            print(f"Logging out {name}...")
            break
        else:
            print("Invalid choice. Please try again.")

def main_menu():
    while True:
        print("\n=== Welcome to the Console Banking System ===")
        print("1. Create Account")
        print("2. Login")
        print("3. Exit")
        choice = input("Choose an option: ").strip()
        if choice == '1':
            create_account()
        elif choice == '2':
            user = login()
            if user:
                perform_transactions(*user)
        elif choice == '3':
            print("Thank you for using the Banking System. Goodbye!")
            break
        else:
            print("Invalid choice. Please select 1, 2, or 3.")

if __name__ == "__main__":
    main_menu()

